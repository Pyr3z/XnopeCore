<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XnopeCore</name>
    </assembly>
    <members>
        <member name="T:Xnope.CellsUtil">
            <summary>
            Utilities for RimWorld 'cells'.
            <para />
            Cells are generally represented as IntVec3's (3-D vectors with integer dimensions),
            or sometimes as LocalTargetInfo's (a struct that is castable to/from an IntVec3 or Thing).
            </summary>
        </member>
        <member name="M:Xnope.CellsUtil.Average(System.Collections.Generic.IEnumerable{Verse.IntVec3},System.Func{Verse.IntVec3,System.Int32})">
            <summary>
            Averages an IEnumerable of cells, with an optional multiplicity function that
            determines how much weight a specific kind of cell should have on the average.
            </summary>
            <param name="cells">IEnumerable of IntVec3</param>
            <param name="multiplicityFactorFunc">If not null, the result of this function
            is effectively the number of times the passed cell is counted in the average.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.Average(System.Collections.Generic.IEnumerable{Verse.LocalTargetInfo},System.Func{Verse.LocalTargetInfo,System.Int32})">
            <summary>
            Averages an IEnumerable of cells, with an optional multiplicity function that
            determines how much weight a specific kind of cell should have on the average.
            </summary>
            <param name="cells">IEnumerable of LocalTargetInfo</param>
            <param name="multiplicityFactorFunc">If not null, the result of this function
            is effectively the number of times the passed cell is counted in the average.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.Average(System.Func{Verse.LocalTargetInfo,System.Int32},Verse.LocalTargetInfo[])">
            <summary>
            Averages the passed cells, with an optional multiplicity function that
            determines how much weight a specific kind of cell should have on the average.
            </summary>
            <param name="multiplicityFactorFunc">If not null, the result of this function
            is effectively the number of times the passed cell is counted in the average.</param>
            <param name="cells"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.CellIsBetween(Verse.CellLine,Verse.CellLine,Verse.IntVec3)">
            <summary>
            Checks if c is between lineA and lineB.
            <para />
            lineA must be counter-clockwise of lineB w.r.t. their intersection, and they cannot be equal.
            </summary>
            <param name="lineA"></param>
            <param name="lineB"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.CellsInLineTo(Verse.IntVec3,Verse.IntVec3,System.Boolean)">
            <summary>
            Yields the cells in a line from a to b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="useOldVersion">If true, will use the old version of the calculation. (My version.)</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.CornerlessEdgeCells(Verse.CellRect)">
            <summary>
            Yields the edges of a rect, sans corners.
            <para />
            Order: South-East-North-West.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.CountMineableCellsTo(Verse.IntVec3,Verse.IntVec3,Verse.Map,System.Boolean)">
            <summary>
            Counts the number of mineable cells between a and be.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="map"></param>
            <param name="consecutive">If true, returns the highest number of consecutive mineable cells.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.DistanceSquaredToNearestMineable(Verse.IntVec3,Verse.Map,System.Single)">
            <summary>
            Returns the square distance between cell and the nearest mineabl cell.
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.DistanceSquaredToNearestMineable(Verse.IntVec3,Verse.Map,System.Single,Verse.IntVec3@)">
            <summary>
            Returns the square distance between cell and the nearest mineable cell.
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <param name="mineable">The closest mineable cell.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.DistanceSquaredToNearestMineable(Verse.LocalTargetInfo,Verse.Map,System.Single,Verse.LocalTargetInfo@)">
            <summary>
            Returns the square distance between cell and the nearest mineable cell.
            <para />
            The mineable out parameter is assigned a LocalTargetInfo which wraps the Thing of the cell,
            not merely its IntVec3.
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <param name="mineable">The closest mineable cell, with a Thing instead of an IntVec3.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.FurthestCellFrom(Verse.CellRect,Verse.LocalTargetInfo,System.Boolean,System.Predicate{Verse.IntVec3})">
            <summary>
            Finds the furthest cell in the rect from point.
            <para />
            If there is no validator, only edge cells are checked,
            as logically only edge cells could ever be returned.
            </summary>
            <param name="rect"></param>
            <param name="point"></param>
            <param name="edgeCellsOnly">Forced to true if validator is null. Science, b*tch.</param>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.IsAroundTerrainOfTag(Verse.IntVec3,Verse.Map,System.Single,System.String)">
            <summary>
            Returns true if the cell is around any terrain with the given tag, in the given search radius.
            <para />
            Example terrain tags would be "Water" or "Road".
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.IsAroundTerrainOfTag(Verse.LocalTargetInfo,Verse.Map,System.Single,System.String)">
            <summary>
            Returns true if the cell is around any terrain with the given tag, in the given search radius.
            <para />
            Example terrain tags would be "Water" or "Road".
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.IsClockwiseOfWRT(Verse.IntVec3,Verse.IntVec3,Verse.IntVec3)">
            <summary>
            Returns if a is clockwise of b in the X-Z plane, with respect to wrt.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="wrt"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.NearestStandableCell(Verse.IntVec3,Verse.Map,System.Single)">
            <summary>
            Returns the nearest standable cell within the searchRadius, or IntVec3.Invalid if none exists.
            </summary>
            <param name="from"></param>
            <param name="map"></param>
            <param name="searchRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.RotationFacing(Verse.IntVec3,Verse.IntVec3)">
            <summary>
            Returns the cardinal direction facing 'to', from the perspective of 'from'.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.ToIntVec3(Verse.Rot4,System.Byte)">
            <summary>
            Returns the IntVec3 vector equivalent of the given rotation, optionally shifted clock-wise.
            <para />
            Example result: Rot4.East -> (1,0,0) || Rot4.West -> (-1,0,0)
            </summary>
            <param name="rot"></param>
            <param name="shiftedBy"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.ToIntVec3(System.Byte,System.Byte)">
            <summary>
            Returns the IntVec3 vector equivalent of the given rotation, optionally shifted clock-wise.
            </summary>
            <param name="rotb"></param>
            <param name="shiftedBy"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.RightTriangleArea(Verse.IntVec3,System.Int32,System.Boolean)">
            <summary>
            Yields the cells in the area of a right triangle.
            </summary>
            <param name="a"></param>
            <param name="width"></param>
            <param name="up"></param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.TryFindNearestRoadEdgeCell(Verse.IntVec3,Verse.Map,Verse.IntVec3@)">
            <summary>
            If there are road cells on the edge of map, this will return the nearest one.
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <param name="roadCell">Will be IntVec3.Invalid if return is false.</param>
            <returns></returns>
        </member>
        <member name="M:Xnope.CellsUtil.TryFindNearestRoadEdgeCells(Verse.IntVec3,Verse.Map)">
            <summary>
            If there are road cells on the edge of the map, this returns the nearest collection of them.
            </summary>
            <param name="cell"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="T:Xnope.EnumerableUtils">
            <summary>
            Various utilities concerning IEnumerables.
            </summary>
        </member>
        <member name="M:Xnope.EnumerableUtils.LimitTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Limits the number of elements in the IEnumerable to the integer specified.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="numElements"></param>
            <returns></returns>
        </member>
    </members>
</doc>
